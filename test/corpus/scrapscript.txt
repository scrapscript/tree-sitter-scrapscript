===========================
BYTES TEST 1
===========================

~~aGVsbG8gd29ybGQ=

---

(program
  (bytes))

===========================
BYTES TEST 2
===========================

~~QUZG

---

(program
  (bytes))

===========================
NUMBERS TEST 1
===========================

123

---

(program
  (number))

===========================
NUMBERS TEST 2
===========================

1.23

---

(program
  (number))

===========================
TEXT TEST 1
===========================

"hello world"

---

(program
  (text))

===========================
TEXT TEST 2
===========================

"üê∏"

---

(program
  (text))

===========================
TEXT TEST 3
===========================

"hello" ++ "world"

---

(program
  (infix
    left: (text)
    op: (op)
    right: (text)))

===========================
TEXT TEST 4
===========================

"hello--sly--world"

---

(program
  (text))

===========================
LIST TEST 1
===========================

[1, 2, 3]

---

(program
  (list
    (number)
    (number)
    (number)))

===========================
LIST TEST 2
===========================

[]

---

(program
  (list))

===========================
LIST TEST 3
===========================

[1, 2, 3] +< 4

---

(program
  (infix
    (list
      (number)
      (number)
      (number))
    (op)
    (number)))

===========================
RECORD TEST 1
===========================

{ a = 1, b = "x" }

---

(program
  (record
    (field
      name: (id)
      value: (number))
    (field
      name: (id)
      value: (text))))

===========================
RECORD TEST 2
===========================

{ ..g }

---

(program
  (record
    (field
      record_spread: (id))))

===========================
RECORD TEST 3
===========================

rec.a

---

(program
  (infix
    (id)
    (op)
    (id)))

===========================
fun TEST 1
===========================

| "a" -> 1 | "b" -> 2

---

(program
  (match_fun
    (match_arm
      (pattern
        (text))
      (number))
    (match_arm
      (pattern
        (text))
      (number))))

===========================
fun TEST 2
===========================

f "b" ; f = | "a" -> 1 | "b" -> 2 | "c" -> 3 | x -> 0

---

(program
  (where
    (apply
      (id)
      (text))
    (declaration
      (pattern
        (id))
      (match_fun
        (match_arm
          (pattern
            (text))
          (number))
        (match_arm
          (pattern
            (text))
          (number))
        (match_arm
          (pattern
            (text))
          (number))
        (match_arm
          (pattern
            (id))
          (number))))))

===========================
op TEST 1
===========================

1 + 2

---

(program
  (infix
    (number)
    (op)
    (number)))

===========================
id TEST 1
===========================

x

---

(program
  (id))

===========================
HOLE TEST 1
===========================

()

---

(program
  (hole))

===========================
fun TEST 3
===========================

(x -> x ' x) 123

---

(program
  (apply
    (parens
      (fun
        (pattern
          (id))
        (infix
          (id)
          (op)
          (id))))
    (number)))

===========================
WHERE TEST 1
===========================

a + b + c ; a = 1 ; b = 2 ; c = 3

---

(program
  (where
    (where
      (where
        (infix
          (infix
            (id)
            (op)
            (id))
          (op)
          (id))
        (declaration
          (pattern
            (id))
          (number)))
      (declaration
        (pattern
          (id))
        (number)))
    (declaration
      (pattern
        (id))
      (number))))

===========================
WHERE TEST 2
===========================

x; x : t = 1 ; y : t = 2 ; t : int

---

(program
  (where
    (where
      (where
        (id)
        (declaration
          (pattern
            (id))
          (id)
          (number)))
      (declaration
        (pattern
          (id))
        (id)
        (number)))
    (declaration
      (pattern
        (id))
      (id))))

===========================
RECORD TEST 4
===========================

{ init = #a 123 }

---

(program
  (record
    (field
      name: (id)
      value: (tag
               (id)
               (number)))))

===========================
op TEST 2
===========================

1.0 / 2.0

---

(program
  (infix
    (number)
    (op)
    (number)))

===========================
op TEST 3
===========================

3 >= 4

---

(program
  (infix
    (number)
    (op)
    (number)))

===========================
RECORD TEST 5
===========================

{a = 4}@a

---

(program
  (infix
    left: (record
            (field
              name: (id)
              value: (number)))
    op: (op)
    right: (id)))

===========================
LIST TEST 4
===========================

[1 + 2, 3 + 4]

---

(program
  (list
    (infix
      (number)
      (op)
      (number))
    (infix
      (number)
      (op)
      (number))))

===========================
fun TEST 4
===========================

| #x _ -> 234 | #a 123 -> 456 | _ -> 789

---

(program
  (match_fun
    (match_arm
      (pattern
        (tag_pattern
          (id)
          (pattern
            (wildcard))))
      (number))
    (match_arm
      (pattern
        (tag_pattern
          (id)
          (pattern
            (number))))
      (number))
    (match_arm
      (pattern
        (wildcard))
      (number))))

===========================
op TEST 4
===========================

1.0 / 2.0 + 3.0

---

(program
  (infix
    (infix
      (number)
      (op)
      (number))
    (op)
    (number)))

===========================
fun TEST 5
===========================

f (#add {x = 3, y = 4}) ; f = | #b () -> "foo" | #add {x = x, y = y} -> x + y

---

(program
  (where
    (apply
      caller: (id)
      callee: (parens
                expr: (tag
                        (id)
                        (record
                          (field
                            name: (id)
                            value: (number))
                          (field
                            name: (id)
                            value: (number))))))
    (declaration
      (pattern
        (id))
      (match_fun
        (match_arm
          (pattern
            (tag_pattern
              (id)
              (pattern
                (hole))))
          (text))
        (match_arm
          (pattern
            (tag_pattern
              (id)
              (pattern
                (record_pattern
                  (field_pattern
                    name: (id)
                    (pattern
                      (id)))
                  (field_pattern
                    name: (id)
                    (pattern
                      (id)))))))
          (infix
            left: (id)
            op: (op)
            right: (id)))))))

===========================
fun TEST 6
===========================

say (1 < 2) ; say = | #false () -> "oh no" | #true () -> "omg"

---

(program
  (where
    (apply
      (id)
      (parens
        (infix
          (number)
          (op)
          (number))))
    (declaration
      (pattern
        (id))
      (match_fun
        (match_arm
          (pattern
            (tag_pattern
              (id)
              (pattern
                (hole))))
          (text))
        (match_arm
          (pattern
            (tag_pattern
              (id)
              (pattern
                (hole))))
          (text))))))

===========================
fun TEST 7
===========================

f {x = 4, y = 5} ; f = | {} -> 0 | {x = a, ...} -> a | c -> 1

---

(program
  (where
    (apply
      caller: (id)
      callee: (record
                (field
                  name: (id)
                  value: (number))
                (field
                  name: (id)
                  value: (number))))
    (declaration
      (pattern
        (id))
      (match_fun
        (match_arm
          (pattern
            (record_pattern))
          (number))
        (match_arm
          (pattern
            (record_pattern
              (field_pattern
                name: (id)
                (pattern
                  (id)))
              (field_pattern)))
          (id))
        (match_arm
          (pattern
            (id))
          (number))))))

===========================
LIST TEST 5
===========================

tail [1,2,3] ; tail = | first >+ rest -> rest

---

(program
  (where
    (apply
      (id)
      (list
        (number)
        (number)
        (number)))
    (declaration
      (pattern
        (id))
      (match_fun
        (match_arm
          (pattern
            (cons
              (pattern
                (id))
              (pattern
                (id))))
          (id))))))

===========================
op TEST 5
===========================

false || false && true

---

(program
  (infix
    (infix
      (id)
      (op)
      (id))
    (op)
    (id)))

===========================
TAG TEST 1
===========================

#false () || #false () && #true ()

---

(program
  (infix
    (infix
      (tag
        (id)
        (hole))
      (op)
      (tag
        (id)
        (hole)))
    (op)
    (tag
      (id)
      (hole))))

===========================
fun TEST 8
===========================

1 |> (a -> a + 2) |> (b -> b * 2)

---

(program
  (infix
    (infix
      (number)
      (op)
      (parens
        (fun
          (pattern
            (id))
          (infix
            (id)
            (op)
            (number)))))
    (op)
    (parens
      (fun
        (pattern
          (id))
        (infix
          (id)
          (op)
          (number))))))

===========================
RECORD TEST 6
===========================

{x=[1,{y=2}]}

---

(program
  (record
    (field
      name: (id)
      value: (list
               (number)
               (record
                 (field
                   name: (id)
                   value: (number)))))))

===========================
LIST TEST 6
===========================

[[1,[2,3]],4]

---

(program
  (list
    (list
      (number)
      (list
        (number)
        (number)))
    (number)))

===========================
RECORD TEST 7
===========================

{x={y=1}}

---

(program
  (record
    (field
      name: (id)
      value: (record
               (field
                 name: (id)
                 value: (number))))))

===========================
NUMBER TEST 3
===========================

[ 1 , -1 , 1.0, -1.0 ]

---

(program
  (list
    (number)
    (number)
    (number)
    (number)))

===========================
fun TEST 9
===========================

x -> rest -> { x, ..rest }

---

(program
  (fun
    (pattern
      (id))
    (fun
      (pattern
        (id))
      (record
        (field
          (id))
        (field
          (id))))))

===========================
COMMENT TEST 1
===========================

-- comment1
2
-- comment3

---

(program
  (number))

===========================
fun TEST 10
===========================

f -> g -> f >> g

---

(program
  (fun
    (pattern
      (id))
    (fun
      (pattern
        (id))
      (infix
        (id)
        (op)
        (id)))))

===========================
RECORD TEST 8
===========================

r.a ; r = { a = 1 }

---

(program
  (where
    (infix
      (id)
      (op)
      (id))
    (declaration
      (pattern
        (id))
      (record
        (field
          (id)
          (number))))))

===========================
guard TEST 1
===========================

classify-number
; classify-number = 
    | 0 -> #zero ()
    | n ? n < 0 -> #negative n
    | n ? n > 100 -> #large n
    | n -> #normal n

---

(program
  (where
    (id)
    (declaration
      (pattern
        (id))
      (match_fun
        (match_arm
          (pattern
            (number))
          (tag
            (id)
            (hole)))
        (match_arm
          (pattern
            (id))
          guard: (infix
                   left: (id)
                   op: (op)
                   right: (number))
          (tag
            (id)
            (id)))
        (match_arm
          (pattern
            (id))
          guard: (infix
                   left: (id)
                   op: (op)
                   right: (number))
          (tag
            (id)
            (id)))
        (match_arm
          (pattern
            (id))
          (tag
            (id)
            (id)))))))

===========================
built-ins TEST 1
===========================

f
; f = list/map
; g = list/filter
; h = maybe/default
; k = result/bind

---

(program
  (where
    (where
      (where
        (where
          (id)
          (declaration
            (pattern
              (id))
            (id)))
        (declaration
          (pattern
            (id))
          (id)))
      (declaration
        (pattern
          (id))
        (id)))
    (declaration
      (pattern
        (id))
      (id))))

===========================
type declaration TEST 1
===========================

shape
; shape :
    | #circle { radius : float }
    | #rectangle { width : float, height : float }
    | #triangle { base : float, height : float }

---

(program
  (where
    (id)
    (type_declaration
      (id)
      (tagged_data_record
        (id)
        (data_record
          (data_member
            name: (id)
            type: (id))))
      (tagged_data_record
        (id)
        (data_record
          (data_member
            name: (id)
            type: (id))
          (data_member
            name: (id)
            type: (id))))
      (tagged_data_record
        (id)
        (data_record
          (data_member
            name: (id)
            type: (id))
          (data_member
            name: (id)
            type: (id)))))))

===========================
fun TEST 11
===========================

process-response
; process-response =
    | #ok { status = 200, data = content } -> #success content
    | #ok { status = 404, data = _ } -> #not-found ()
    | #ok { status = s, data = _ } ? s >= 500 -> #server-error s
    | #error msg -> #failure msg
    | _ -> #unknown ()

---

(program
  (where
    (id)
    (declaration
      (pattern
        (id))
      (match_fun
        (match_arm
          (pattern
            (tag_pattern
              (id)
              (pattern
                (record_pattern
                  (field_pattern
                    name: (id)
                    (pattern
                      (number)))
                  (field_pattern
                    name: (id)
                    (pattern
                      (id)))))))
          (tag
            (id)
            (id)))
        (match_arm
          (pattern
            (tag_pattern
              (id)
              (pattern
                (record_pattern
                  (field_pattern
                    name: (id)
                    (pattern
                      (number)))
                  (field_pattern
                    name: (id)
                    (pattern
                      (wildcard)))))))
          (tag
            (id)
            (hole)))
        (match_arm
          (pattern
            (tag_pattern
              (id)
              (pattern
                (record_pattern
                  (field_pattern
                    name: (id)
                    (pattern
                      (id)))
                  (field_pattern
                    name: (id)
                    (pattern
                      (wildcard)))))))
          guard: (infix
                   left: (id)
                   op: (op)
                   right: (number))
          (tag
            (id)
            (id)))
        (match_arm
          (pattern
            (tag_pattern
              (id)
              (pattern
                (id))))
          (tag
            (id)
            (id)))
        (match_arm
          (pattern
            (wildcard))
          (tag
            (id)
            (hole)))))))
